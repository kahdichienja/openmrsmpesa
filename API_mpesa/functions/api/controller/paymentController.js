/**
 * Author, Agoo Clinton
 * Mail: agooclinton@gmail.com
 * Phone: 254797324006
 * Github/Gitlab Username: kahdichienja.
 * 
 */
const { Router } = require('express')
const admin = require("firebase-admin");
const request = require('request')
const models = require('../models/')
const firestoredb = admin.firestore();
const clientcredentialsUrl = require('../constants/string_url')
const accessToken = require('../middleware/')
const accountSid = 'AC811d7caae9568898530989b58061e900';
const authToken = '7e201cb32a4c01ef791cc6d10e57eec8';
const client = require('twilio')(accountSid, authToken);

const payments = function () {
    /**
     * Instantiating the Exppress Router 
     * 
    */
    let api = Router()
    /**
     * '/v1/payments/access_token_test 
    */
    api.post('/access_token_test', accessToken.accessTokenTest, async (req, res) => {

        return res.json({
            success: true,
            token: req.access_token
        })
    })
    /**
     * '/v1/lipanampesaOnlineSTK/:amount/:phoneNumber' :: initiate top up request:
     */

    api.get('/lipanampesaOnlineSTK/:amount/:phoneNumber', accessToken.accessToken, async (req, res) => {

        const url = clientcredentialsUrl.apiurlforstkpush_sand, auth = "Bearer " + req.access_token
        const timestamp = (new Date()).toISOString().replace(/[^0-9]/g, '').slice(0, -3)
        const password = Buffer.from(clientcredentialsUrl.business_short_code + clientcredentialsUrl.lipa_na_mpesa_passkey + timestamp).toString('base64')
        const sendNotification =  (body, phoneNumber) => client.messages.create({
            body: body,
            from: "+12679302835",
            to: phoneNumber,
          
          })
          .then((message) => console.log(message.sid));

        request(
            {
                url: url,
                method: "POST",
                headers: {
                    "Authorization": auth
                },
                json: {
                    "BusinessShortCode": clientcredentialsUrl.business_short_code,//The organization shortcode used to receive the transaction.
                    "Password": password,//The password for encrypting the request. This is generated by base64 encoding BusinessShortcode, Passkey and Timestamp.
                    "Timestamp": timestamp, //The timestamp of the transaction in the format yyyymmddhhiiss.
                    "TransactionType": "CustomerPayBillOnline",
                    "Amount": req.params.amount,//The amount to be transacted
                    "PartyA": req.params.phoneNumber, //The MSISDN sending the funds.
                    "PartyB": clientcredentialsUrl.business_short_code,//	The organization shortcode receiving the funds
                    "PhoneNumber": req.params.phoneNumber,
                    "CallBackURL": clientcredentialsUrl.callbackURL_sand,
                    "AccountReference": "Medical Payment",
                    "TransactionDesc": "iPay OpenMRS"
                }
            },
            function (error, response, body) {
                if (error) {
                    console.log(error)
                }
                else {
              

                    firestoredb.collection(models.transactionCollections).add(
                        {
                            "phonenumberusedforpayment": req.params.phoneNumber,
                            "amountpaid": req.params.amount,
                            "merchantRequestID": `${body['MerchantRequestID']}`,
                            "checkoutRequestID": `${body['CheckoutRequestID']}`,
                            "responseCode": `${body['ResponseCode']}`,
                            "responseDescription": `${body['ResponseDescription']}`,
                            "customerMessage": `${body['CustomerMessage']}`
                        }
                    )
                    const phoneNumberr = `+${req.params.phoneNumber}`
                    sendNotification("Payment Was Inittiated successfully for Billing in OpenMRS",phoneNumberr)
                   
                      
                      
                    return res.status(200).json(
                        {
                            "phonenumberusedforpayment": req.params.phoneNumber,
                            "amountpaid": req.params.amount,
                            "merchantRequestID": `${body['MerchantRequestID']}`,
                            "checkoutRequestID": `${body['CheckoutRequestID']}`,
                            "responseCode": `${body['ResponseCode']}`,
                            "responseDescription": `${body['ResponseDescription']}`,
                            "customerMessage": `${body['CustomerMessage']}`
                        }

                    )
                    // return res.status(200).json(body)
                }
            }
        )

    })



    return api
}

module.exports = payments;